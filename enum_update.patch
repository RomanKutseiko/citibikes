diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..53d57c0
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,3 @@
+.idea
+.build
+.gradle
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
index 0000000..f01b41a
--- /dev/null
+++ b/.idea/encodings.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/../../scivantage/enchi-tax-reporting/dbconnection.properties" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/src/main/java/com/kutseiko/bicycle/DTO/UserDto.java b/src/main/java/com/kutseiko/bicycle/DTO/UserDto.java
index 1712c7e..9db0a7e 100644
--- a/src/main/java/com/kutseiko/bicycle/DTO/UserDto.java
+++ b/src/main/java/com/kutseiko/bicycle/DTO/UserDto.java
@@ -1,5 +1,6 @@
 package com.kutseiko.bicycle.DTO;
 
+import com.kutseiko.bicycle.core.type.Gender;
 import java.time.LocalDate;
 import javax.validation.constraints.NotNull;
 import lombok.Data;
@@ -11,8 +12,7 @@ public class UserDto {
 
     LocalDate dateOfBirth;
 
-    @NotNull
-    int gender = 0;
+    String gender = Gender.ANOTHER.getName();
 
     @NotNull
     String userType;
diff --git a/src/main/java/com/kutseiko/bicycle/core/type/Gender.java b/src/main/java/com/kutseiko/bicycle/core/type/Gender.java
index 9e41711..440324b 100644
--- a/src/main/java/com/kutseiko/bicycle/core/type/Gender.java
+++ b/src/main/java/com/kutseiko/bicycle/core/type/Gender.java
@@ -1,27 +1,26 @@
 package com.kutseiko.bicycle.core.type;
 
 import lombok.Getter;
+import org.apache.commons.lang3.EnumUtils;
 
 @Getter
 public enum Gender {
 
-    ANOTHER("ANOTHER", 0),
-    MALE("MALE", 1),
-    FEMALE("FEMALE", 2);
+    ANOTHER("ANOTHER"),
+    FEMALE("FEMALE"),
+    MALE("MALE");
 
     private String name;
-    private Integer code;
 
-    Gender(String name, Integer code) {
+    Gender(String name) {
         this.name = name;
-        this.code = code;
     }
 
-    public static Gender valueOf(int code) {
-        switch(code) {
-            case 1: return MALE;
-            case 2: return FEMALE;
-            default: return ANOTHER;
+    public static Gender getGenderByName(String name) {
+        if (EnumUtils.isValidEnumIgnoreCase(Gender.class, name)) {
+            return valueOf(name.toUpperCase());
+        } else {
+            return ANOTHER;
         }
     }
 }
diff --git a/src/main/java/com/kutseiko/bicycle/core/type/UserType.java b/src/main/java/com/kutseiko/bicycle/core/type/UserType.java
index d9b7012..0ab64ba 100644
--- a/src/main/java/com/kutseiko/bicycle/core/type/UserType.java
+++ b/src/main/java/com/kutseiko/bicycle/core/type/UserType.java
@@ -1,6 +1,7 @@
 package com.kutseiko.bicycle.core.type;
 
 import lombok.Getter;
+import org.apache.commons.lang3.EnumUtils;
 
 @Getter
 public enum UserType {
@@ -16,8 +17,8 @@ public enum UserType {
 
 
     public static UserType getUserTypeByName(String name) {
-        if ("CUSTOMER".equals(name.toUpperCase())) {
-            return CUSTOMER;
+        if (EnumUtils.isValidEnumIgnoreCase(UserType.class, name)) {
+            return valueOf(name.toUpperCase());
         }
         return SUBSCRIBER;
     }
diff --git a/src/main/java/com/kutseiko/bicycle/repository/impl/TripJdbcRepository.java b/src/main/java/com/kutseiko/bicycle/repository/impl/TripJdbcRepository.java
index 0cd7666..7792285 100644
--- a/src/main/java/com/kutseiko/bicycle/repository/impl/TripJdbcRepository.java
+++ b/src/main/java/com/kutseiko/bicycle/repository/impl/TripJdbcRepository.java
@@ -132,8 +132,8 @@ public class TripJdbcRepository implements TripRepository {
                 .setUser(new User().setId(rs.getLong(8))
                         .setDateOfBirth(convertDateToLocalDate(rs.getDate("birthday")))
                         .setEmail(rs.getString("email"))
-                        .setGender(Gender.valueOf(rs.getInt("gender")))
-                        .setUserType(UserType.getUserTypeByName(rs.getString("user_type").toUpperCase())))
+                        .setGender(Gender.valueOf(rs.getString("gender")))
+                        .setUserType(UserType.valueOf(rs.getString("user_type"))))
                 .setBike(new Bike()
                         .setId(rs.getLong(13))
                         .setInfo(rs.getString("info"))
diff --git a/src/main/java/com/kutseiko/bicycle/repository/impl/UserJdbcRepository.java b/src/main/java/com/kutseiko/bicycle/repository/impl/UserJdbcRepository.java
index 0795054..3975116 100644
--- a/src/main/java/com/kutseiko/bicycle/repository/impl/UserJdbcRepository.java
+++ b/src/main/java/com/kutseiko/bicycle/repository/impl/UserJdbcRepository.java
@@ -40,8 +40,8 @@ public class UserJdbcRepository implements UserRepository {
                     .setId(rs.getLong("id"))
                     .setDateOfBirth(convertDateToLocalDate(rs.getDate("birthday")))
                     .setEmail(rs.getString("email"))
-                    .setGender(Gender.valueOf(rs.getInt("gender")))
-                    .setUserType(UserType.getUserTypeByName(rs.getString("user_type").toUpperCase())));
+                    .setGender(Gender.valueOf(rs.getString("gender")))
+                    .setUserType(UserType.valueOf(rs.getString("user_type"))));
             }
         } catch (SQLException e) {
             e.printStackTrace();
@@ -62,8 +62,8 @@ public class UserJdbcRepository implements UserRepository {
                     .setId(rs.getLong("id"))
                     .setDateOfBirth(convertDateToLocalDate(rs.getDate("birthday")))
                     .setEmail(rs.getString("email"))
-                    .setGender(Gender.valueOf(rs.getInt("gender")))
-                    .setUserType(UserType.getUserTypeByName(rs.getString("user_type").toUpperCase())));
+                    .setGender(Gender.valueOf(rs.getString("gender")))
+                    .setUserType(UserType.valueOf(rs.getString("user_type"))));
             }
         } catch (SQLException e) {
             e.printStackTrace();
@@ -73,13 +73,13 @@ public class UserJdbcRepository implements UserRepository {
 
     @Override
     public Optional<User> updateUser(User user) {
-        String sql = "UPDATE appuser SET birthday=?, email=?, gender=?, user_type=? WHERE id=?";
+        String sql = "UPDATE appuser SET birthday=?, email=?, gender=?::GENDER_ENUM, user_type=?::USER_TYPE_ENUM WHERE id=?";
         try (Connection connection = dataSource.getConnection();
              PreparedStatement ps = connection.prepareStatement(sql)) {
             ps.setDate(1, convertLocalDateToDate(user.getDateOfBirth()));
             ps.setString(2, user.getEmail());
-            ps.setInt(3, user.getGender().getCode());
-            ps.setString(4, user.getUserType().getName().toUpperCase());
+            ps.setString(3, user.getGender().getName());
+            ps.setString(4, user.getUserType().getName());
             ps.setLong(5, user.getId());
             ps.executeUpdate();
         } catch (SQLException e) {
@@ -104,13 +104,13 @@ public class UserJdbcRepository implements UserRepository {
 
     @Override
     public Optional<User> addUser(User user) {
-        String sql = "INSERT INTO appuser(birthday, email, gender, user_type) VALUES (?, ?, ?, ?)";
+        String sql = "INSERT INTO appuser(birthday, email, gender, user_type) VALUES (?, ?, ?::GENDER_ENUM, ?::USER_TYPE_ENUM)";
         try (Connection connection = dataSource.getConnection();
              PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
             ps.setDate(1, convertLocalDateToDate(user.getDateOfBirth()));
             ps.setString(2, user.getEmail());
-            ps.setInt(3, user.getGender().getCode());
-            ps.setString(4, user.getUserType().getName().toUpperCase());
+            ps.setString(3, user.getGender().getName());
+            ps.setString(4, user.getUserType().getName());
             ps.executeUpdate();
             ResultSet rs = ps.getGeneratedKeys();
             if (rs.next()) {
diff --git a/src/main/java/com/kutseiko/bicycle/service/impl/UserServiceImpl.java b/src/main/java/com/kutseiko/bicycle/service/impl/UserServiceImpl.java
index 9440df6..1511020 100644
--- a/src/main/java/com/kutseiko/bicycle/service/impl/UserServiceImpl.java
+++ b/src/main/java/com/kutseiko/bicycle/service/impl/UserServiceImpl.java
@@ -30,7 +30,7 @@ public class UserServiceImpl implements UserService {
     @Override
     public Optional<User> createUser(UserDto userDto) {
         User user = new User().setEmail(userDto.getEmail()).setDateOfBirth(userDto.getDateOfBirth())
-            .setGender(Gender.valueOf(userDto.getGender())).setUserType(UserType.getUserTypeByName(userDto.getUserType()));
+            .setGender(Gender.getGenderByName(userDto.getGender())).setUserType(UserType.getUserTypeByName(userDto.getUserType()));
         return userRepository.addUser(user);
     }
 
@@ -42,7 +42,7 @@ public class UserServiceImpl implements UserService {
     @Override
     public Optional<User> updateUser(Long id, UserDto userDto) {
         User user = new User().setId(id).setEmail(userDto.getEmail()).setDateOfBirth(userDto.getDateOfBirth())
-            .setGender(Gender.valueOf(userDto.getGender())).setUserType(UserType.getUserTypeByName(userDto.getUserType()));
+            .setGender(Gender.getGenderByName(userDto.getGender())).setUserType(UserType.getUserTypeByName(userDto.getUserType()));
         return userRepository.updateUser(user);
     }
 }
diff --git a/src/main/java/com/kutseiko/bicycle/utils/DateConverter.java b/src/main/java/com/kutseiko/bicycle/utils/DateConverter.java
index 719ae64..196c6ed 100644
--- a/src/main/java/com/kutseiko/bicycle/utils/DateConverter.java
+++ b/src/main/java/com/kutseiko/bicycle/utils/DateConverter.java
@@ -3,11 +3,12 @@ package com.kutseiko.bicycle.utils;
 import java.sql.Timestamp;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
+import java.util.Objects;
 
 public class DateConverter {
 
     public static LocalDate convertDateToLocalDate(java.sql.Date date) {
-        return date.toLocalDate();
+        return Objects.isNull(date) ? null : date.toLocalDate();
     }
 
     public static java.sql.Date convertLocalDateToDate(LocalDate localDate) {
diff --git a/src/main/resources/db/migration/V2__create_user_enum_type.sql b/src/main/resources/db/migration/V2__create_user_enum_type.sql
new file mode 100644
index 0000000..4781cb4
--- /dev/null
+++ b/src/main/resources/db/migration/V2__create_user_enum_type.sql
@@ -0,0 +1,4 @@
+CREATE TYPE USER_TYPE_ENUM AS ENUM ('SUBSCRIBER', 'CUSTOMER');
+ALTER TABLE AppUser ALTER COLUMN user_type DROP DEFAULT;
+ALTER TABLE AppUser ALTER COLUMN user_type TYPE USER_TYPE_ENUM USING user_type::USER_TYPE_ENUM;
+ALTER TABLE AppUser ALTER COLUMN user_type SET DEFAULT 'SUBSCRIBER'::USER_TYPE_ENUM;
diff --git a/src/main/resources/db/migration/V3__set_user_type_not_null.sql b/src/main/resources/db/migration/V3__set_user_type_not_null.sql
new file mode 100644
index 0000000..42b8b1f
--- /dev/null
+++ b/src/main/resources/db/migration/V3__set_user_type_not_null.sql
@@ -0,0 +1 @@
+ALTER TABLE AppUser ALTER COLUMN user_type SET NOT NULL;
diff --git a/src/main/resources/db/migration/V4__create_gender_enum_type.sql b/src/main/resources/db/migration/V4__create_gender_enum_type.sql
new file mode 100644
index 0000000..f41c659
--- /dev/null
+++ b/src/main/resources/db/migration/V4__create_gender_enum_type.sql
@@ -0,0 +1,22 @@
+CREATE TYPE GENDER_ENUM AS ENUM ('ANOTHER', 'FEMALE', 'MALE');
+ALTER TABLE AppUser ALTER COLUMN gender DROP DEFAULT;
+
+CREATE OR REPLACE FUNCTION SMALLINT_CAST_GENDER_ENUM(i SMALLINT)
+    returns GENDER_ENUM as $gender$
+DECLARE
+    i SMALLINT;
+BEGIN
+    IF i = 0 THEN
+        return 'ANOTHER'::GENDER_ENUM;
+    END IF;
+    IF i = 1 THEN
+        return 'FEMALE'::GENDER_ENUM;
+    ELSE
+        return 'MALE'::GENDER_ENUM;
+    END IF;
+END;
+$gender$ LANGUAGE plpgsql;
+
+CREATE CAST (SMALLINT as GENDER_ENUM) with function SMALLINT_CAST_GENDER_ENUM(SMALLINT);
+ALTER TABLE AppUser ALTER COLUMN gender TYPE GENDER_ENUM USING gender::GENDER_ENUM;
+ALTER TABLE AppUser ALTER COLUMN gender SET DEFAULT 'ANOTHER'::GENDER_ENUM;
